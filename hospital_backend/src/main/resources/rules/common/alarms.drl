package rules
import com.example.demo.model.AlarmTriggering
import com.example.demo.model.MaliciousIpAddress
import com.example.demo.model.Request
import com.example.demo.model.Attack
import com.example.demo.model.InvalidLogin
import com.example.demo.model.enums.AlarmType
import com.example.demo.model.enums.AlarmRisk
import com.example.demo.service.AlarmTriggeringService
import com.example.demo.service.MaliciousIpAddressService

global AlarmTriggeringService alarmTriggeringService
global MaliciousIpAddressService ipAddressService


rule "DoS Attack"
	salience $cnt * 1
	no-loop

    when
        accumulate(
        	Request($r: this),
        	$cnt: count($r);
        	$cnt > 50
        )
    then
        alarmTriggeringService.save(new AlarmTriggering(AlarmType.DOS, AlarmRisk.EXTREME, "DoS attack!! " + $cnt + ' of requests appeared in the last 60 seconds!!'));
		insert(new Attack());

end

rule "Brute-Force Attack"
	salience $cnt * 3
	no-loop

    when
        accumulate(
        	Request($r: this, login),
        	$cnt: count($r);
        	$cnt > 50
        )
    then
        alarmTriggeringService.save(new AlarmTriggering(AlarmType.BRUTE_FORCE, AlarmRisk.EXTREME, "Brute-Force attack!! " +  $cnt + ' of login requests appeared in the last 60 seconds!!'));
		insert(new Attack());
		
end

rule "Malicious IP address"
	no-loop

    when
        accumulate(
        	InvalidLogin($l: this),
        	$list: collectList($l);
        	alarmTriggeringService.countSameIpAddress($list) >= 30
        )
    then
        ipAddressService.save(new MaliciousIpAddress(((InvalidLogin) $list.get(0)).ipAddress()));

end